priorities
	[X] use fennel with lua
		[X] figure out how to define a library properly
		[X] Makefile and workflow to use libraries
	[X] use luaunit for tests
		: luaunit installed via apt
		[X] copy the sample test
			: luaunit test works
		[X] Makefile set up to run tests
	[X] connect to csound via c api
		[X] set up ffi basics
		[X] use the ffi library to load csound
		[X] run csound via ffi
	[X] abstractions for a cleaner interface to csound for this task
		[X] use ffi directly instead of via ipc
		[X] create a csound object with all api functions taking an instance as methods
		[X] use the csound api to stop printing to stdout
	[X] interactive control of a real time csound process via channels / table data
		[X] use channels to make k variables
		[X] use table methods to create / manipulate buffered data
	[X] namespace that creates a small composition, based on the current csound test

final conf tasks
	[_] audio process
		: sends requests to process audio; plays back results to hardware
		:
		: in a reliable system, this would have a second process ready in case
		: of failover, connected to the same audio hardware
		[_] messages that ask coordination process for audio
		[_] construction of a "playlist"
		[_] check coordination process for ready audio
		    and download from coordination or data process in standardized chunks
			: within "safety" window to keep latency low and prevent broken
			: output
		[_] play playlist
			[_] initialize and use csound object
				[_] orchestra and score
				[_] method for real time triggering of events
				[_] method of loading up audio buffers downloaded
	[_] coordination process
		: requests to process audio, ands to N servers, and reports results
		:
		: in a reliable system this would be found via service discovery, and
		: load balanced on multiple hosts
		:
		: for efficiency, audio could be shared with the audio process on
		: one host via shm
		[_] list of remotes
		[_] forwarding messages to data processes with async loop
		[_] serve up list of ready audio
	[_] data process
		: takes in data, returns audio data with description
		:
		: in a reliable system this would use service discovery both coming in
		: and sending back
		[_] takes in data and a host
		[_] stores _ for later usage
		[_] sends info about new data to host

deps used:
	cqueues
	fennel version 86198097b8e79771fe5aa877dc849a85bdcc8f66
		previous fennel versions
		: commit 9af9906cadc997f071bfd1201be963e49f5010d4
		: commit 77fdc81d5ee6fbdeba610ce8304026eef249ca42 - (macros / quote / unquote implemented)
	luaffi
	libcsound64
	luaunit

possibilities
	a command line and result database middleware
		: store the string of the input, plus some representation of the
		: result in a db (?) - middleware for readline or nrepl

defunct / obsolete / speculative
	use lunitx to set up tests
		: lunit installed
		: https://github.com/bakpakin/Fennel/blob/master/test.lua#L213
	attach fennel to csound, or csound to fennel
		lua 5.1 can't use the ffi module, so it's going to be csound inside lua
		create a lua program that loads up csound, initializes the API, etc.
			: do this in pure lua or jump into fennel?
			: jump into fennel!
	attempted reinstalling so that csound would use lua5.2, gave up
		[X] do process based parallelism with *nix specific IPC via tcp sockets
		[X] figure out how to open and use tcp sockets
		[X] evaluate replacing my system with the cqueues lib
			: yes

contribute back to the community
	[X] docs
	[X] add doc for multiple value bind to the reference (currently as if it were a feature of let)
	[_] the talk

previous tasklist
	[_] tcp communication / ipc via cqueues
		[X] rewrite ipc.lua entirely
		[X] test coverage for tcp code in ipc.lua
			[X] server abstraction via cqueues, with test coverage
			[X] thread sbstraction via cqueues, with test coverage
			[X] non-socket coroutines in the cqueues wrapper for testing
		[_] use message queues with the cqueues main loop
			[_] design for queue assignment when adding a child process
		[_] decent abstraction to use sockets via coroutines
			[X] a driver for all the hops
				: done with cqueues loop
			[X] design decision
				: a - integrate the IO polling with the event loop
				: b - integrate the event loop with the IO polling
			[X] integrate the event loop into the IO polling
			[_] use the thread code to integration test the driver
	[_] set up communication between I/O loops and main driver / each other
		[X] simple queue
		[_] pub/sub via unique client ids
	[_] investigate using mqtt
	[_] audio process reading blocks of sound from socket, playing them in series
		[_] network audio I/O
		[_] clip series DSL
	[_] child process generating a block of audio to send to audio process
	[_] audio process sending input data to children
		[_] seeding clip series data for round trip(?)
